
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  email       String     @unique
  password    String
  username    String
  // adminId     Int?       @unique
  // recruteurId Int?       @unique
  // candidatId  Int?       @unique
   roleId      Int
  // Admin       Admin?     @relation("UserAdmin", fields: [adminId], references: [id])
  // Recruteur   Recruteur? @relation("UserRecruteur", fields: [recruteurId], references: [id])
  // Candidat    Candidat?  @relation("UserCandidat", fields: [candidatId], references: [id])
  Role        Role      @relation(fields: [roleId], references: [id])
}

// model Admin {
//   id       Int    @id @default(autoincrement())
//   username String
//   email    String
//   password String
//   roleId   Int
//   Role     Role   @relation("AdminRole", fields: [roleId], references: [id])
//   User     User?  @relation("UserAdmin")
// }

model Recruteur {
  id          Int          @id @default(autoincrement())
  name        String
  email       String
  phone       String
  description String?
  postal_code String?
  logo        String?
  sector      String?
  city        String?
  website     String?
  job_offer   JobOffer[]
  // roleId      Int
  // Role        Role         @relation("RecruteurRole", fields: [roleId], references: [id])
  // User        User?        @relation("UserRecruteur")
  Validations Validation[] 
}

model Candidat {
  id          Int           @id @default(autoincrement())
  experience  String?
  fullname    String
  email       String
  phone       String?
  roleId      Int
  skills      String
  // Role        Role          @relation("CandidatRole", fields: [roleId], references: [id])
  Application Application[]
  Validation  Validation?
  // Interview   Interview[]   @relation("CandidatInterviews") // Added relation name
  // skills      Skills[]      @relation("CandidatSkills")
  // User        User?         @relation("UserCandidat")
}

model Role {
  id          Int         @id @default(autoincrement())
  name        String
  // description String
  Users       User[]      @relation
  // Admins      Admin[]     @relation("AdminRole")
  // Recruteurs  Recruteur[] @relation("RecruteurRole")
  // Candidats   Candidat[]  @relation("CandidatRole")
}

model JobOffer {
  id               Int      @id @default(autoincrement())
  title            String
  description      String
  requirements     String?
  location         String
  salary           String
  companyName      String
  postedBy         Int
  contractType     String
  hierarchyLevel   String
  email            String
  recruiter        Recruteur @relation(fields: [postedBy], references: [id])
  applications     Application[]
  skills           String
  // skills           Skills[]   @relation("JobOfferSkills")
}

model Application {
  id          Int          @id @default(autoincrement())
  candidateId Int
  jobOfferId  Int
  created_at  DateTime @default(now())
  filecv      String
  filemotiva  String
  Candidat    Candidat     @relation(fields: [candidateId], references: [id])
  JobOffer    JobOffer     @relation(fields: [jobOfferId], references: [id])
  // Interviews  Interview[]  @relation("ApplicationInterviews") // Added opposite relation field
  // Interview Interview[]
}

model Validation {
  id           Int       @id @default(autoincrement())
  candidatId   Int @unique
  validated_by Int
  result       String
  jobOfferId   Int
  notification String
  candidat     Candidat  @relation(fields: [candidatId], references: [id])
  recruteur    Recruteur @relation(fields: [validated_by], references: [id])
  
}

// model Interview {
//   id            Int         @id @default(autoincrement())
//   applicationId Int
//   location      String
//   link_meet     String
//   application   Application @relation(fields: [applicationId], references: [id])
//   candidatId    Int       
//   candidat      Candidat    @relation("CandidatInterviews", fields: [candidatId], references: [id]) 
//   Application Application[] @relation("ApplicationInterviews")
// }

// model Skills {
//   id          Int      @id @default(autoincrement())
//   name        String
//   categoryId  Int
//   category    Category @relation(fields: [categoryId], references: [id])
//   candidats   Candidat[] @relation("CandidatSkills")
//   jobOffers   JobOffer[] @relation("JobOfferSkills")
// }

// model Category {
//   id       Int      @id @default(autoincrement())
//   name     String
//   description String
//   skills   Skills[]
// }
enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
enum ValidationResult {
  PASS
  FAIL
  PENDING
}
enum NotificationType {
  EMAIL
  SMS
  IN_APP
}
enum ContractType {
  CDI
  CDD
  STAGE
  FREELANCE
}
enum HierarchyLevel {
  JUNIOR
  MID
  SENIOR
  MANAGER
}
